VAGRANTFILE_API_VERSION = '2'

DEMO_NAME = 'high-throughput-aws'

# max number of dse nodes this script will generate
MAX_DSE_NODES = 20

# Ubuntu 14.04 LTS
# http://cloud-images.ubuntu.com/locator/ec2/
# "14.04 amd64 hvm:ebs-ssd"
# Could also use "hvm:ebs-io1"
AMI_LIST = {
    'ap-northeast-1' => 'ami-f4b06cf4',
    'ap-southeast-1' => 'ami-b899a2ea',
    'eu-central-1' => 'ami-b6e0d9ab',
    'eu-west-1' => 'ami-45d8a532',
    'sa-east-1' => 'ami-1199190c',
    'us-east-1' => 'ami-5f709f34',
    'us-west-1' => 'ami-615cb725',
    'cn-north-1' => 'ami-da930ee3',
    'ap-southeast-2' => 'ami-b59ce48f',
    'us-west-2' => 'ami-7f675e4f',
}

PUBLIC_DSE_PORTS='4040,7080,7081,8983,8012,50030,50060'
PRIVATE_DSE_PORTS='7000,7001,7199,9160,7077,8984,9042,9290,10000,61621'
PRIVATE_OPSCENTER_PORTS='61620'

required_envars = ['DATASTAX_USER', 'DATASTAX_PASS']
for envar in required_envars
    if !ENV[envar]
        print "\n$#{envar} must be set in the current shell. \n\tNo actions performed.\n\n"
        exit
    end
end

vb_setup = Proc.new do |vb, override|
    override.vm.synced_folder '.', '/cornerstone', create: true

    override.vm.synced_folder 'cache', '/cache', create: true

    override.vm.box = 'ubuntu/trusty64'

    vb.memory = 512
    vb.cpus = 1
end

azure_setup = Proc.new do |azure, override|
    override.vm.box = 'azure'

    azure.vm_size = 'Medium'
    azure.vm_location = 'West US'

    azure.mgmt_endpoint = 'https://management.core.windows.net'
    azure.mgmt_certificate = ENV['AZURE_MGMT_CERT_PEM']
    azure.subscription_id = ENV['AZURE_SUBSCRIPTION_ID']

    azure.vm_image = 'b39f27a8b8c64d52b05eac6a62ebad85__Ubuntu-14_04_2_LTS-amd64-server-20150309-en-us-30GB'
    azure.vm_name = "#{DEMO_NAME}-#{ENV['DEMO_USER_WORD']}"
    azure.vm_virtual_network_name = "#{DEMO_NAME}-#{ENV['DEMO_USER_WORD']}-vnet"

    azure.private_key_file = ENV['AZURE_PRIVATE_KEY']
    azure.certificate_file = ENV['AZURE_CERT']
    azure.vm_user = ENV['AZURE_SSH_USER']
    azure.vm_password = ENV['AZURE_SSH_PASS']
    override.ssh.username = ENV['AZURE_SSH_USER']
    override.ssh.password = ENV['AZURE_SSH_PASS']

    azure.ssh_port = '22'
end

aws_setup = Proc.new do |aws, override|
    override.vm.box = 'aws-dummy'
    override.ssh.username = 'ubuntu'

    aws.access_key_id = ENV['DEMO_AWS_ACCESS_KEY']
    aws.secret_access_key = ENV['DEMO_AWS_SECRET_KEY']
    aws.region = ENV['DEMO_AWS_REGION']
    aws.availability_zone = ENV['DEMO_AWS_AZ']
    aws.ami = AMI_LIST[aws.region]
    aws.instance_type = 'i2.2xlarge'

    aws.keypair_name = ENV['DEMO_AWS_KEYPAIR_NAME']
    override.ssh.private_key_path = ENV['DEMO_AWS_KEYPAIR_LOCATION']

    aws.security_groups = [ENV['DEMO_AWS_SECURITY_GROUP']]

    aws.tags = {
        'Name' => "#{DEMO_NAME}-vagrant",
        'Owner' => ENV['DEMO_USER'],
        'Email' => ENV['DEMO_EMAIL']
    }
end

bootstrap = Proc.new do |config|
    config.vm.provision :shell, path: 'vagrant/general/apt/install/git_v1.sh',
                                privileged: false
    config.vm.provision :shell, path: 'vagrant/general/file/install/cornerstone_v1.sh',
                                privileged: false
end

dse_install = Proc.new do |config|
    config.vm.provision :shell, path: 'vagrant/general/apt/install/datastax-enterprise_v3.sh',
                                args: ['--datastax-user', "#{ENV['DATASTAX_USER']}",
                                       '--datastax-pass', "#{ENV['DATASTAX_PASS']}"],
                                privileged: false
end

dse_start = Proc.new do |config|

    if ENV['SPARK']
        config.vm.provision :shell, path: 'vagrant/general/apt/first-start/datastax/spark_v2.sh',
                                    args: ['--seeds', ENV['SEEDS'],
                                           '--opscenter-host', ENV['OPSCENTER_HOST']],
                                    privileged: false
    elsif ENV['SOLR']
        config.vm.provision :shell, path: 'vagrant/general/apt/first-start/datastax/solr_v2.sh',
                                    args: ['--seeds', ENV['SEEDS'],
                                           '--opscenter-host', ENV['OPSCENTER_HOST']],
                                    privileged: false
    else
        config.vm.provision :shell, path: 'vagrant/general/apt/first-start/datastax/cassandra_v2.sh',
                                    args: ['--seeds', ENV['SEEDS'],
                                           '--opscenter-host', ENV['OPSCENTER_HOST']],
                                    privileged: false
    end
end

opscenter_install = Proc.new do |config|
    config.vm.provision :shell, path: 'vagrant/general/apt/install/datastax-opscenter_v3.sh',
                                privileged: false
end

opscenter_start = Proc.new do |config|
    config.vm.provision :shell, path: 'vagrant/general/apt/first-start/datastax/opscenter_v1.sh',
                                args: ['--seeds', ENV['SEEDS']],
                                privileged: false
end

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

    # disable default synced folder for all machines
    config.vm.synced_folder '.', '/vagrant', disabled: true

    MAX_DSE_NODES.times do |i|

        config.vm.define "dse#{i}", autostart: true do |dse|

            dse.vm.provider :virtualbox do |vb, override|
                vb_setup.call vb, override

                vb.memory = 2048
                vb.cpus = 1

                override.vm.network :private_network, type: 'dhcp'
            end

            dse.vm.provider :azure do |azure, override|
                azure_setup.call azure, override

                azure.vm_size = 'ExtraLarge'

                azure.tcp_endpoints = "#{PUBLIC_DSE_PORTS}"
            end

            dse.vm.provider :aws do |aws, override|
                aws_setup.call aws, override

                # Using the default of i2.2xlarge
                # aws.instance_type = 'c4.4xlarge'

                aws.ebs_optimized = true
                aws.block_device_mapping = [{
                    'DeviceName' => '/dev/sda1',
                    'Ebs.VolumeSize' => 200,
                    'Ebs.VolumeType' => 'gp2',
                    'Ebs.DeleteOnTermination' => 'true'
                }]
            end

            if ENV['GATHER_IPS']
                config.vm.provision 'shell', inline: "echo GATHER_IPS $(hostname -i)"
            elsif ENV['SEEDS'] and ENV['OPSCENTER_HOST']
                dse_start.call config
            else
                bootstrap.call config
                dse_install.call config
            end
        end
    end


    config.vm.define 'opscenter', autostart: false do |opscenter|
        WEB_PORT = '8888'

        opscenter.vm.provider :virtualbox do |vb, override|
            vb_setup.call vb, override

            vb.memory = 768
            vb.cpus = 1

            override.vm.network :private_network, type: 'dhcp'
        end

        opscenter.vm.provider :azure do |azure, override|
            azure_setup.call azure, override

            azure.vm_size = 'Large'

            azure.tcp_endpoints = "#{WEB_PORT}"
        end

        if ENV['GATHER_IPS']
            config.vm.provision 'shell', inline: 'echo GATHER_IPS $(hostname -i)'
        elsif ENV['WEB_PORT']
            config.vm.provision 'shell', inline: "echo WEB_PORT #{WEB_PORT}"
        elsif ENV['SEEDS']
            opscenter_start.call config
        else
            bootstrap.call config
            opscenter_install.call config
        end
    end
end
